// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef SCHEMA_ODB_SQLITE_HXX
#define SCHEMA_ODB_SQLITE_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20300UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "Schema.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>
#include <odb/view-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // Version
  //
  template <>
  struct class_traits< ::CoinDB::Version >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::Version >
  {
    public:
    typedef ::CoinDB::Version object_type;
    typedef ::std::shared_ptr< ::CoinDB::Version > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Network
  //
  template <>
  struct class_traits< ::CoinDB::Network >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::Network >
  {
    public:
    typedef ::CoinDB::Network object_type;
    typedef ::std::shared_ptr< ::CoinDB::Network > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // User
  //
  template <>
  struct class_traits< ::CoinDB::User >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::User >
  {
    public:
    typedef ::CoinDB::User object_type;
    typedef ::std::shared_ptr< ::CoinDB::User > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Contact
  //
  template <>
  struct class_traits< ::CoinDB::Contact >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::Contact >
  {
    public:
    typedef ::CoinDB::Contact object_type;
    typedef ::std::shared_ptr< ::CoinDB::Contact > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Keychain
  //
  template <>
  struct class_traits< ::CoinDB::Keychain >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::Keychain >
  {
    public:
    typedef ::CoinDB::Keychain object_type;
    typedef ::std::shared_ptr< ::CoinDB::Keychain > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Key
  //
  template <>
  struct class_traits< ::CoinDB::Key >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::Key >
  {
    public:
    typedef ::CoinDB::Key object_type;
    typedef ::std::shared_ptr< ::CoinDB::Key > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // AccountBin
  //
  template <>
  struct class_traits< ::CoinDB::AccountBin >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::AccountBin >
  {
    public:
    typedef ::CoinDB::AccountBin object_type;
    typedef ::std::shared_ptr< ::CoinDB::AccountBin > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Account
  //
  template <>
  struct class_traits< ::CoinDB::Account >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::Account >
  {
    public:
    typedef ::CoinDB::Account object_type;
    typedef ::std::shared_ptr< ::CoinDB::Account > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // SigningScript
  //
  template <>
  struct class_traits< ::CoinDB::SigningScript >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::SigningScript >
  {
    public:
    typedef ::CoinDB::SigningScript object_type;
    typedef ::std::shared_ptr< ::CoinDB::SigningScript > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // BlockHeader
  //
  template <>
  struct class_traits< ::CoinDB::BlockHeader >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::BlockHeader >
  {
    public:
    typedef ::CoinDB::BlockHeader object_type;
    typedef ::std::shared_ptr< ::CoinDB::BlockHeader > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // MerkleBlock
  //
  template <>
  struct class_traits< ::CoinDB::MerkleBlock >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::MerkleBlock >
  {
    public:
    typedef ::CoinDB::MerkleBlock object_type;
    typedef ::std::shared_ptr< ::CoinDB::MerkleBlock > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TxIn
  //
  template <>
  struct class_traits< ::CoinDB::TxIn >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::TxIn >
  {
    public:
    typedef ::CoinDB::TxIn object_type;
    typedef ::std::shared_ptr< ::CoinDB::TxIn > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // TxOut
  //
  template <>
  struct class_traits< ::CoinDB::TxOut >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::TxOut >
  {
    public:
    typedef ::CoinDB::TxOut object_type;
    typedef ::std::shared_ptr< ::CoinDB::TxOut > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // Tx
  //
  template <>
  struct class_traits< ::CoinDB::Tx >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::CoinDB::Tx >
  {
    public:
    typedef ::CoinDB::Tx object_type;
    typedef ::std::shared_ptr< ::CoinDB::Tx > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  // KeychainView
  //
  template <>
  struct class_traits< ::CoinDB::KeychainView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::KeychainView >
  {
    public:
    typedef ::CoinDB::KeychainView view_type;
    typedef ::CoinDB::KeychainView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // AccountView
  //
  template <>
  struct class_traits< ::CoinDB::AccountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::AccountView >
  {
    public:
    typedef ::CoinDB::AccountView view_type;
    typedef ::CoinDB::AccountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // AccountCountView
  //
  template <>
  struct class_traits< ::CoinDB::AccountCountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::AccountCountView >
  {
    public:
    typedef ::CoinDB::AccountCountView view_type;
    typedef ::CoinDB::AccountCountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // AccountBinView
  //
  template <>
  struct class_traits< ::CoinDB::AccountBinView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::AccountBinView >
  {
    public:
    typedef ::CoinDB::AccountBinView view_type;
    typedef ::CoinDB::AccountBinView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // SigningScriptView
  //
  template <>
  struct class_traits< ::CoinDB::SigningScriptView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::SigningScriptView >
  {
    public:
    typedef ::CoinDB::SigningScriptView view_type;
    typedef ::CoinDB::SigningScriptView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // ScriptCountView
  //
  template <>
  struct class_traits< ::CoinDB::ScriptCountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::ScriptCountView >
  {
    public:
    typedef ::CoinDB::ScriptCountView view_type;
    typedef ::CoinDB::ScriptCountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // TxView
  //
  template <>
  struct class_traits< ::CoinDB::TxView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::TxView >
  {
    public:
    typedef ::CoinDB::TxView view_type;
    typedef ::CoinDB::TxView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // TxOutView
  //
  template <>
  struct class_traits< ::CoinDB::TxOutView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::TxOutView >
  {
    public:
    typedef ::CoinDB::TxOutView view_type;
    typedef ::CoinDB::TxOutView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // BalanceView
  //
  template <>
  struct class_traits< ::CoinDB::BalanceView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::BalanceView >
  {
    public:
    typedef ::CoinDB::BalanceView view_type;
    typedef ::CoinDB::BalanceView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // BestHeightView
  //
  template <>
  struct class_traits< ::CoinDB::BestHeightView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::BestHeightView >
  {
    public:
    typedef ::CoinDB::BestHeightView view_type;
    typedef ::CoinDB::BestHeightView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // HorizonHeightView
  //
  template <>
  struct class_traits< ::CoinDB::HorizonHeightView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::HorizonHeightView >
  {
    public:
    typedef ::CoinDB::HorizonHeightView view_type;
    typedef ::CoinDB::HorizonHeightView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // BlockCountView
  //
  template <>
  struct class_traits< ::CoinDB::BlockCountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::BlockCountView >
  {
    public:
    typedef ::CoinDB::BlockCountView view_type;
    typedef ::CoinDB::BlockCountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // MerkleBlockCountView
  //
  template <>
  struct class_traits< ::CoinDB::MerkleBlockCountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::MerkleBlockCountView >
  {
    public:
    typedef ::CoinDB::MerkleBlockCountView view_type;
    typedef ::CoinDB::MerkleBlockCountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // HorizonTimestampView
  //
  template <>
  struct class_traits< ::CoinDB::HorizonTimestampView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::HorizonTimestampView >
  {
    public:
    typedef ::CoinDB::HorizonTimestampView view_type;
    typedef ::CoinDB::HorizonTimestampView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // ConfirmedTxView
  //
  template <>
  struct class_traits< ::CoinDB::ConfirmedTxView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::ConfirmedTxView >
  {
    public:
    typedef ::CoinDB::ConfirmedTxView view_type;
    typedef ::CoinDB::ConfirmedTxView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };

  // IncompleteBlockCountView
  //
  template <>
  struct class_traits< ::CoinDB::IncompleteBlockCountView >
  {
    static const class_kind kind = class_view;
  };

  template <>
  class access::view_traits< ::CoinDB::IncompleteBlockCountView >
  {
    public:
    typedef ::CoinDB::IncompleteBlockCountView view_type;
    typedef ::CoinDB::IncompleteBlockCountView* pointer_type;

    static void
    callback (database&, view_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/sqlite/version.hxx>
#include <odb/sqlite/forward.hxx>
#include <odb/sqlite/binding.hxx>
#include <odb/sqlite/sqlite-types.hxx>
#include <odb/sqlite/query.hxx>

namespace odb
{
  // Version
  //
  template <typename A>
  struct query_columns< ::CoinDB::Version, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::Version, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::Version, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Version, id_sqlite, A >::version_type_
  query_columns< ::CoinDB::Version, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinDB::Version, id_sqlite, A >:
    query_columns< ::CoinDB::Version, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Version, id_sqlite >:
    public access::object_traits< ::CoinDB::Version >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // version_
      //
      long long version_value;
      bool version_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Version, id_common >:
    public access::object_traits_impl< ::CoinDB::Version, id_sqlite >
  {
  };

  // Network
  //
  template <typename A>
  struct query_columns< ::CoinDB::Network, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // network
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    network_type_;

    static const network_type_ network;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::Network, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::Network, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Network, id_sqlite, A >::network_type_
  query_columns< ::CoinDB::Network, id_sqlite, A >::
  network (A::table_name, "\"network\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinDB::Network, id_sqlite, A >:
    query_columns< ::CoinDB::Network, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Network, id_sqlite >:
    public access::object_traits< ::CoinDB::Network >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // network_
      //
      details::buffer network_value;
      std::size_t network_size;
      bool network_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Network, id_common >:
    public access::object_traits_impl< ::CoinDB::Network, id_sqlite >
  {
  };

  // User
  //
  template <typename A>
  struct query_columns< ::CoinDB::User, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // username
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    username_type_;

    static const username_type_ username;

    // txoutscript_whitelist_enabled
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txoutscript_whitelist_enabled_type_;

    static const txoutscript_whitelist_enabled_type_ txoutscript_whitelist_enabled;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::User, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::User, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::User, id_sqlite, A >::username_type_
  query_columns< ::CoinDB::User, id_sqlite, A >::
  username (A::table_name, "\"username\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::User, id_sqlite, A >::txoutscript_whitelist_enabled_type_
  query_columns< ::CoinDB::User, id_sqlite, A >::
  txoutscript_whitelist_enabled (A::table_name, "\"txoutscript_whitelist_enabled\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinDB::User, id_sqlite, A >:
    query_columns< ::CoinDB::User, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinDB::User, id_sqlite >:
    public access::object_traits< ::CoinDB::User >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // username_
      //
      details::buffer username_value;
      std::size_t username_size;
      bool username_null;

      // txoutscript_whitelist_enabled_
      //
      long long txoutscript_whitelist_enabled_value;
      bool txoutscript_whitelist_enabled_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // txoutscript_whitelist_
    //
    struct txoutscript_whitelist_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::set< ::std::vector< unsigned char > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::value_type value_type;

      typedef set_functions<value_type> functions_type;
      typedef sqlite::container_statements< txoutscript_whitelist_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            const value_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const value_type&, void*);

      static bool
      select (value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 3UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::User, id_common >:
    public access::object_traits_impl< ::CoinDB::User, id_sqlite >
  {
  };

  // Contact
  //
  template <typename A>
  struct query_columns< ::CoinDB::Contact, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // username
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    username_type_;

    static const username_type_ username;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::Contact, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::Contact, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Contact, id_sqlite, A >::username_type_
  query_columns< ::CoinDB::Contact, id_sqlite, A >::
  username (A::table_name, "\"username\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinDB::Contact, id_sqlite, A >:
    query_columns< ::CoinDB::Contact, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Contact, id_sqlite >:
    public access::object_traits< ::CoinDB::Contact >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // username_
      //
      details::buffer username_value;
      std::size_t username_size;
      bool username_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 2UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Contact, id_common >:
    public access::object_traits_impl< ::CoinDB::Contact, id_sqlite >
  {
  };

  // Keychain
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // depth
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    depth_type_;

    static const depth_type_ depth;

    // parent_fp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    parent_fp_type_;

    static const parent_fp_type_ parent_fp;

    // child_num
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    child_num_type_;

    static const child_num_type_ child_num;

    // pubkey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    pubkey_type_;

    static const pubkey_type_ pubkey;

    // chain_code
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    chain_code_type_;

    static const chain_code_type_ chain_code;

    // privkey_ciphertext
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    privkey_ciphertext_type_;

    static const privkey_ciphertext_type_ privkey_ciphertext;

    // privkey_salt
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    privkey_salt_type_;

    static const privkey_salt_type_ privkey_salt;

    // seed_ciphertext
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    seed_ciphertext_type_;

    static const seed_ciphertext_type_ seed_ciphertext;

    // seed_salt
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    seed_salt_type_;

    static const seed_salt_type_ seed_salt;

    // parent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    parent_type_;

    static const parent_type_ parent;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // hidden
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hidden_type_;

    static const hidden_type_ hidden;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::name_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::depth_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  depth (A::table_name, "\"depth\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::parent_fp_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  parent_fp (A::table_name, "\"parent_fp\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::child_num_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  child_num (A::table_name, "\"child_num\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::pubkey_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  pubkey (A::table_name, "\"pubkey\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::chain_code_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  chain_code (A::table_name, "\"chain_code\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::privkey_ciphertext_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  privkey_ciphertext (A::table_name, "\"privkey_ciphertext\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::privkey_salt_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  privkey_salt (A::table_name, "\"privkey_salt\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::seed_ciphertext_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  seed_ciphertext (A::table_name, "\"seed_ciphertext\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::seed_salt_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  seed_salt (A::table_name, "\"seed_salt\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::parent_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  parent (A::table_name, "\"parent\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::hash_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::hidden_type_
  pointer_query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  hidden (A::table_name, "\"hidden\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::Keychain, id_sqlite >:
    public access::object_traits< ::CoinDB::Keychain >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // depth_
      //
      long long depth_value;
      bool depth_null;

      // parent_fp_
      //
      long long parent_fp_value;
      bool parent_fp_null;

      // child_num_
      //
      long long child_num_value;
      bool child_num_null;

      // pubkey_
      //
      details::buffer pubkey_value;
      std::size_t pubkey_size;
      bool pubkey_null;

      // chain_code_
      //
      details::buffer chain_code_value;
      std::size_t chain_code_size;
      bool chain_code_null;

      // privkey_ciphertext_
      //
      details::buffer privkey_ciphertext_value;
      std::size_t privkey_ciphertext_size;
      bool privkey_ciphertext_null;

      // privkey_salt_
      //
      long long privkey_salt_value;
      bool privkey_salt_null;

      // seed_ciphertext_
      //
      details::buffer seed_ciphertext_value;
      std::size_t seed_ciphertext_size;
      bool seed_ciphertext_null;

      // seed_salt_
      //
      long long seed_salt_value;
      bool seed_salt_null;

      // parent_
      //
      long long parent_value;
      bool parent_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // hidden_
      //
      long long hidden_value;
      bool hidden_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // derivation_path_
    //
    struct derivation_path_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< unsigned int > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< derivation_path_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // children_
    //
    struct children_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::weak_ptr< ::CoinDB::Keychain > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< children_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    struct parent_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 14UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Keychain, id_common >:
    public access::object_traits_impl< ::CoinDB::Keychain, id_sqlite >
  {
  };

  // Key
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::Key, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // root_keychain
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    root_keychain_type_;

    static const root_keychain_type_ root_keychain;

    // index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    index_type_;

    static const index_type_ index;

    // pubkey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    pubkey_type_;

    static const pubkey_type_ pubkey;

    // is_private
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    is_private_type_;

    static const is_private_type_ is_private;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::root_keychain_type_
  pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::
  root_keychain (A::table_name, "\"root_keychain\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::index_type_
  pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::pubkey_type_
  pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::
  pubkey (A::table_name, "\"pubkey\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::is_private_type_
  pointer_query_columns< ::CoinDB::Key, id_sqlite, A >::
  is_private (A::table_name, "\"is_private\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::Key, id_sqlite >:
    public access::object_traits< ::CoinDB::Key >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // root_keychain_
      //
      long long root_keychain_value;
      bool root_keychain_null;

      // index_
      //
      long long index_value;
      bool index_null;

      // pubkey_
      //
      details::buffer pubkey_value;
      std::size_t pubkey_size;
      bool pubkey_null;

      // is_private_
      //
      long long is_private_value;
      bool is_private_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // derivation_path_
    //
    struct derivation_path_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< unsigned int > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< derivation_path_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct root_keychain_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Key, id_common >:
    public access::object_traits_impl< ::CoinDB::Key, id_sqlite >
  {
  };

  // IndexedLabel
  //
  template <>
  class access::composite_value_traits< ::CoinDB::IndexedLabel, id_sqlite >
  {
    public:
    typedef ::CoinDB::IndexedLabel value_type;

    struct image_type
    {
      // first
      //
      long long first_value;
      bool first_null;

      // second
      //
      details::buffer second_value;
      std::size_t second_size;
      bool second_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          sqlite::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              sqlite::statement_kind);
  };

  // AccountBin
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_type_;

    static const account_type_ account;

    // index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    index_type_;

    static const index_type_ index;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // script_count
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    script_count_type_;

    static const script_count_type_ script_count;

    // next_script_index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    next_script_index_type_;

    static const next_script_index_type_ next_script_index;

    // minsigs
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    minsigs_type_;

    static const minsigs_type_ minsigs;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::account_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  account (A::table_name, "\"account\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::index_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::name_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::script_count_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  script_count (A::table_name, "\"script_count\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::next_script_index_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  next_script_index (A::table_name, "\"next_script_index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::minsigs_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  minsigs (A::table_name, "\"minsigs\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::hash_type_
  pointer_query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite >:
    public access::object_traits< ::CoinDB::AccountBin >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // account_
      //
      long long account_value;
      bool account_null;

      // index_
      //
      long long index_value;
      bool index_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // script_count_
      //
      long long script_count_value;
      bool script_count_null;

      // next_script_index_
      //
      long long next_script_index_value;
      bool next_script_index_null;

      // minsigs_
      //
      long long minsigs_value;
      bool minsigs_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // script_label_map_
    //
    struct script_label_map_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinDB::IndexedLabelMap container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::key_type key_type;
      typedef container_traits_type::value_type value_type;

      typedef map_functions<key_type, value_type> functions_type;
      typedef sqlite::container_statements< script_label_map_traits > statements_type;

      struct data_image_type
      {
        // key
        //
        long long key_value;
        bool key_null;

        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            const key_type*,
            const value_type&);

      static void
      init (key_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const key_type&, const value_type&, void*);

      static bool
      select (key_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // keychains_
    //
    struct keychains_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinDB::KeychainSet container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::value_type value_type;

      typedef set_functions<value_type> functions_type;
      typedef sqlite::container_statements< keychains_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            const value_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const value_type&, void*);

      static bool
      select (value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct account_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::AccountBin, id_common >:
    public access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite >
  {
  };

  // Account
  //
  template <typename A>
  struct query_columns< ::CoinDB::Account, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // minsigs
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    minsigs_type_;

    static const minsigs_type_ minsigs;

    // unused_pool_size
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    unused_pool_size_type_;

    static const unused_pool_size_type_ unused_pool_size;

    // time_created
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    time_created_type_;

    static const time_created_type_ time_created;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // compressed_keys
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    compressed_keys_type_;

    static const compressed_keys_type_ compressed_keys;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::Account, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::Account, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Account, id_sqlite, A >::name_type_
  query_columns< ::CoinDB::Account, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Account, id_sqlite, A >::minsigs_type_
  query_columns< ::CoinDB::Account, id_sqlite, A >::
  minsigs (A::table_name, "\"minsigs\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Account, id_sqlite, A >::unused_pool_size_type_
  query_columns< ::CoinDB::Account, id_sqlite, A >::
  unused_pool_size (A::table_name, "\"unused_pool_size\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Account, id_sqlite, A >::time_created_type_
  query_columns< ::CoinDB::Account, id_sqlite, A >::
  time_created (A::table_name, "\"time_created\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Account, id_sqlite, A >::hash_type_
  query_columns< ::CoinDB::Account, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Account, id_sqlite, A >::compressed_keys_type_
  query_columns< ::CoinDB::Account, id_sqlite, A >::
  compressed_keys (A::table_name, "\"compressed_keys\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinDB::Account, id_sqlite, A >:
    query_columns< ::CoinDB::Account, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Account, id_sqlite >:
    public access::object_traits< ::CoinDB::Account >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // name_
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // minsigs_
      //
      long long minsigs_value;
      bool minsigs_null;

      // unused_pool_size_
      //
      long long unused_pool_size_value;
      bool unused_pool_size_null;

      // time_created_
      //
      long long time_created_value;
      bool time_created_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // compressed_keys_
      //
      long long compressed_keys_value;
      bool compressed_keys_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // keychains_
    //
    struct keychains_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinDB::KeychainSet container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::value_type value_type;

      typedef set_functions<value_type> functions_type;
      typedef sqlite::container_statements< keychains_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            const value_type&);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (const value_type&, void*);

      static bool
      select (value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    // bins_
    //
    struct bins_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinDB::AccountBinVector container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< bins_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 7UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Account, id_common >:
    public access::object_traits_impl< ::CoinDB::Account, id_sqlite >
  {
  };

  // SigningScript
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_type_;

    static const account_type_ account;

    // account_bin
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_bin_type_;

    static const account_bin_type_ account_bin;

    // index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    index_type_;

    static const index_type_ index;

    // label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    label_type_;

    static const label_type_ label;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinDB::SigningScript::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // txinscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txinscript_type_;

    static const txinscript_type_ txinscript;

    // txoutscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txoutscript_type_;

    static const txoutscript_type_ txoutscript;

    // contact
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    contact_type_;

    static const contact_type_ contact;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::account_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  account (A::table_name, "\"account\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::account_bin_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  account_bin (A::table_name, "\"account_bin\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::index_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::label_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  label (A::table_name, "\"label\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::status_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::txinscript_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  txinscript (A::table_name, "\"txinscript\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::txoutscript_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  txoutscript (A::table_name, "\"txoutscript\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::contact_type_
  pointer_query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  contact (A::table_name, "\"contact\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >:
    public access::object_traits< ::CoinDB::SigningScript >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // account_
      //
      long long account_value;
      bool account_null;

      // account_bin_
      //
      long long account_bin_value;
      bool account_bin_null;

      // index_
      //
      long long index_value;
      bool index_null;

      // label_
      //
      details::buffer label_value;
      std::size_t label_size;
      bool label_null;

      // status_
      //
      long long status_value;
      bool status_null;

      // txinscript_
      //
      details::buffer txinscript_value;
      std::size_t txinscript_size;
      bool txinscript_null;

      // txoutscript_
      //
      details::buffer txoutscript_value;
      std::size_t txoutscript_size;
      bool txoutscript_null;

      // contact_
      //
      long long contact_value;
      bool contact_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // keys_
    //
    struct keys_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinDB::KeyVector container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< keys_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct account_tag;
    struct account_bin_tag;
    struct contact_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::SigningScript, id_common >:
    public access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >
  {
  };

  // BlockHeader
  //
  template <typename A>
  struct query_columns< ::CoinDB::BlockHeader, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // height
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    height_type_;

    static const height_type_ height;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // prevhash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    prevhash_type_;

    static const prevhash_type_ prevhash;

    // merkleroot
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    merkleroot_type_;

    static const merkleroot_type_ merkleroot;

    // timestamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // bits
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    bits_type_;

    static const bits_type_ bits;

    // nonce
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    nonce_type_;

    static const nonce_type_ nonce;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::hash_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::height_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  height (A::table_name, "\"height\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::version_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::prevhash_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  prevhash (A::table_name, "\"prevhash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::merkleroot_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  merkleroot (A::table_name, "\"merkleroot\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::timestamp_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::bits_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  bits (A::table_name, "\"bits\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::nonce_type_
  query_columns< ::CoinDB::BlockHeader, id_sqlite, A >::
  nonce (A::table_name, "\"nonce\"", 0);

  template <typename A>
  struct pointer_query_columns< ::CoinDB::BlockHeader, id_sqlite, A >:
    query_columns< ::CoinDB::BlockHeader, id_sqlite, A >
  {
  };

  template <>
  class access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite >:
    public access::object_traits< ::CoinDB::BlockHeader >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // height_
      //
      long long height_value;
      bool height_null;

      // version_
      //
      long long version_value;
      bool version_null;

      // prevhash_
      //
      details::buffer prevhash_value;
      std::size_t prevhash_size;
      bool prevhash_null;

      // merkleroot_
      //
      details::buffer merkleroot_value;
      std::size_t merkleroot_size;
      bool merkleroot_null;

      // timestamp_
      //
      long long timestamp_value;
      bool timestamp_null;

      // bits_
      //
      long long bits_value;
      bool bits_null;

      // nonce_
      //
      long long nonce_value;
      bool nonce_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 9UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::BlockHeader, id_common >:
    public access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite >
  {
  };

  // MerkleBlock
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_type_;

    static const blockheader_type_ blockheader;

    // txcount
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txcount_type_;

    static const txcount_type_ txcount;

    // flags
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    flags_type_;

    static const flags_type_ flags;

    // txsinserted
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txsinserted_type_;

    static const txsinserted_type_ txsinserted;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::blockheader_type_
  pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::txcount_type_
  pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  txcount (A::table_name, "\"txcount\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::flags_type_
  pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  flags (A::table_name, "\"flags\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::txsinserted_type_
  pointer_query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  txsinserted (A::table_name, "\"txsinserted\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite >:
    public access::object_traits< ::CoinDB::MerkleBlock >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // blockheader_
      //
      long long blockheader_value;
      bool blockheader_null;

      // txcount_
      //
      long long txcount_value;
      bool txcount_null;

      // flags_
      //
      details::buffer flags_value;
      std::size_t flags_size;
      bool flags_null;

      // txsinserted_
      //
      long long txsinserted_value;
      bool txsinserted_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // hashes_
    //
    struct hashes_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 3UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::std::vector< ::std::vector< unsigned char > > container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< hashes_traits > statements_type;

      struct data_image_type
      {
        // index
        //
        long long index_value;
        bool index_null;

        // value
        //
        details::buffer value_value;
        std::size_t value_size;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (data_image_type&,
            index_type*,
            const value_type&);

      static void
      init (index_type&,
            value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      persist (const container_type&,
               statements_type&);

      static void
      load (container_type&,
            statements_type&);

      static void
      update (const container_type&,
              statements_type&);

      static void
      erase (statements_type&);
    };

    struct blockheader_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 5UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::MerkleBlock, id_common >:
    public access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite >
  {
  };

  // TxIn
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // outhash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    outhash_type_;

    static const outhash_type_ outhash;

    // outindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    outindex_type_;

    static const outindex_type_ outindex;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // sequence
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sequence_type_;

    static const sequence_type_ sequence;

    // tx
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tx_type_;

    static const tx_type_ tx;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;

    // outpoint
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    outpoint_type_;

    static const outpoint_type_ outpoint;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::outhash_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  outhash (A::table_name, "\"outhash\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::outindex_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  outindex (A::table_name, "\"outindex\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::script_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::sequence_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  sequence (A::table_name, "\"sequence\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::tx_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  tx (A::table_name, "\"tx\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::txindex_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::outpoint_type_
  pointer_query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  outpoint (A::table_name, "\"outpoint\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >:
    public access::object_traits< ::CoinDB::TxIn >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // outhash_
      //
      details::buffer outhash_value;
      std::size_t outhash_size;
      bool outhash_null;

      // outindex_
      //
      long long outindex_value;
      bool outindex_null;

      // script_
      //
      details::buffer script_value;
      std::size_t script_size;
      bool script_null;

      // sequence_
      //
      long long sequence_value;
      bool sequence_null;

      // tx_
      //
      long long tx_value;
      bool tx_null;

      // txindex_
      //
      long long txindex_value;
      bool txindex_null;

      // outpoint_
      //
      long long outpoint_value;
      bool outpoint_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct tx_tag;
    struct outpoint_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 8UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::TxIn, id_common >:
    public access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >
  {
  };

  // TxOut
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    value_type_;

    static const value_type_ value;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // tx
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tx_type_;

    static const tx_type_ tx;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;

    // spent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    spent_type_;

    static const spent_type_ spent;

    // sending_account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sending_account_type_;

    static const sending_account_type_ sending_account;

    // sending_label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    sending_label_type_;

    static const sending_label_type_ sending_label;

    // receiving_account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    receiving_account_type_;

    static const receiving_account_type_ receiving_account;

    // receiving_label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    receiving_label_type_;

    static const receiving_label_type_ receiving_label;

    // account_bin
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_bin_type_;

    static const account_bin_type_ account_bin;

    // signingscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    signingscript_type_;

    static const signingscript_type_ signingscript;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinDB::TxOut::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::value_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::script_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::tx_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  tx (A::table_name, "\"tx\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::txindex_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::spent_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  spent (A::table_name, "\"spent\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::sending_account_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  sending_account (A::table_name, "\"sending_account\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::sending_label_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  sending_label (A::table_name, "\"sending_label\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::receiving_account_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  receiving_account (A::table_name, "\"receiving_account\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::receiving_label_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  receiving_label (A::table_name, "\"receiving_label\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::account_bin_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  account_bin (A::table_name, "\"account_bin\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::signingscript_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  signingscript (A::table_name, "\"signingscript\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::status_type_
  pointer_query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >:
    public access::object_traits< ::CoinDB::TxOut >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // value_
      //
      long long value_value;
      bool value_null;

      // script_
      //
      details::buffer script_value;
      std::size_t script_size;
      bool script_null;

      // tx_
      //
      long long tx_value;
      bool tx_null;

      // txindex_
      //
      long long txindex_value;
      bool txindex_null;

      // spent_
      //
      long long spent_value;
      bool spent_null;

      // sending_account_
      //
      long long sending_account_value;
      bool sending_account_null;

      // sending_label_
      //
      details::buffer sending_label_value;
      std::size_t sending_label_size;
      bool sending_label_null;

      // receiving_account_
      //
      long long receiving_account_value;
      bool receiving_account_null;

      // receiving_label_
      //
      details::buffer receiving_label_value;
      std::size_t receiving_label_size;
      bool receiving_label_null;

      // account_bin_
      //
      long long account_bin_value;
      bool account_bin_null;

      // signingscript_
      //
      long long signingscript_value;
      bool signingscript_null;

      // status_
      //
      long long status_value;
      bool status_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    struct tx_tag;
    struct spent_tag;
    struct sending_account_tag;
    struct receiving_account_tag;
    struct account_bin_tag;
    struct signingscript_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::TxOut, id_common >:
    public access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >
  {
  };

  // Tx
  //
  template <typename A>
  struct pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // unsigned_hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    unsigned_hash_type_;

    static const unsigned_hash_type_ unsigned_hash;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // locktime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    locktime_type_;

    static const locktime_type_ locktime;

    // timestamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinDB::Tx::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // conflicting
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    conflicting_type_;

    static const conflicting_type_ conflicting;

    // have_all_outpoints
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    have_all_outpoints_type_;

    static const have_all_outpoints_type_ have_all_outpoints;

    // txin_total
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txin_total_type_;

    static const txin_total_type_ txin_total;

    // txout_total
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txout_total_type_;

    static const txout_total_type_ txout_total;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_type_;

    static const blockheader_type_ blockheader;

    // blockindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockindex_type_;

    static const blockindex_type_ blockindex;

    // user
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    user_type_;

    static const user_type_ user;
  };

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::id_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::hash_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::unsigned_hash_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  unsigned_hash (A::table_name, "\"unsigned_hash\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::version_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::locktime_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  locktime (A::table_name, "\"locktime\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::timestamp_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::status_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::conflicting_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  conflicting (A::table_name, "\"conflicting\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::have_all_outpoints_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  have_all_outpoints (A::table_name, "\"have_all_outpoints\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::txin_total_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  txin_total (A::table_name, "\"txin_total\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::txout_total_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  txout_total (A::table_name, "\"txout_total\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::blockheader_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::blockindex_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  blockindex (A::table_name, "\"blockindex\"", 0);

  template <typename A>
  const typename pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::user_type_
  pointer_query_columns< ::CoinDB::Tx, id_sqlite, A >::
  user (A::table_name, "\"user\"", 0);

  template <>
  class access::object_traits_impl< ::CoinDB::Tx, id_sqlite >:
    public access::object_traits< ::CoinDB::Tx >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // hash_
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // unsigned_hash_
      //
      details::buffer unsigned_hash_value;
      std::size_t unsigned_hash_size;
      bool unsigned_hash_null;

      // version_
      //
      long long version_value;
      bool version_null;

      // locktime_
      //
      long long locktime_value;
      bool locktime_null;

      // timestamp_
      //
      long long timestamp_value;
      bool timestamp_null;

      // status_
      //
      long long status_value;
      bool status_null;

      // conflicting_
      //
      long long conflicting_value;
      bool conflicting_null;

      // have_all_outpoints_
      //
      long long have_all_outpoints_value;
      bool have_all_outpoints_null;

      // txin_total_
      //
      long long txin_total_value;
      bool txin_total_null;

      // txout_total_
      //
      long long txout_total_value;
      bool txout_total_null;

      // blockheader_
      //
      long long blockheader_value;
      bool blockheader_null;

      // blockindex_
      //
      long long blockindex_value;
      bool blockindex_null;

      // user_
      //
      long long user_value;
      bool user_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    // txins_
    //
    struct txins_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinDB::txins_t container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< txins_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    // txouts_
    //
    struct txouts_traits
    {
      static const std::size_t id_column_count = 1UL;
      static const std::size_t data_column_count = 2UL;

      static const bool versioned = false;

      static const char insert_statement[];
      static const char select_statement[];
      static const char delete_statement[];

      typedef ::CoinDB::txouts_t container_type;
      typedef
      odb::access::container_traits<container_type>
      container_traits_type;
      typedef container_traits_type::index_type index_type;
      typedef container_traits_type::value_type value_type;

      typedef ordered_functions<index_type, value_type> functions_type;
      typedef sqlite::container_statements< txouts_traits > statements_type;

      struct data_image_type
      {
        // value
        //
        long long value_value;
        bool value_null;

        std::size_t version;
      };

      static void
      bind (sqlite::bind*,
            const sqlite::bind* id,
            std::size_t id_size,
            data_image_type&);

      static void
      grow (data_image_type&,
            bool*);

      static void
      init (value_type&,
            const data_image_type&,
            database*);

      static void
      insert (index_type, const value_type&, void*);

      static bool
      select (index_type&, value_type&, void*);

      static void
      delete_ (void*);

      static void
      load (container_type&,
            statements_type&);
    };

    struct blockheader_tag;
    struct user_tag;

    using object_traits<object_type>::id;

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&,
          sqlite::statement_kind);

    static void
    bind (sqlite::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          sqlite::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef sqlite::object_statements<object_type> statements_type;

    typedef sqlite::query_base query_base_type;

    static const std::size_t column_count = 14UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::CoinDB::Tx, id_common >:
    public access::object_traits_impl< ::CoinDB::Tx, id_sqlite >
  {
  };

  // KeychainView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::KeychainView, id_sqlite >:
    public access::view_traits< ::CoinDB::KeychainView >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // depth
      //
      long long depth_value;
      bool depth_null;

      // parent_fp
      //
      long long parent_fp_value;
      bool parent_fp_null;

      // child_num
      //
      long long child_num_value;
      bool child_num_null;

      // pubkey
      //
      details::buffer pubkey_value;
      std::size_t pubkey_size;
      bool pubkey_null;

      // hash
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // is_private
      //
      long long is_private_value;
      bool is_private_null;

      // is_encrypted
      //
      long long is_encrypted_value;
      bool is_encrypted_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 9UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::KeychainView, id_common >:
    public access::view_traits_impl< ::CoinDB::KeychainView, id_sqlite >
  {
  };

  // AccountView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::AccountView, id_sqlite >:
    public access::view_traits< ::CoinDB::AccountView >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // name
      //
      details::buffer name_value;
      std::size_t name_size;
      bool name_null;

      // minsigs
      //
      long long minsigs_value;
      bool minsigs_null;

      // unused_pool_size
      //
      long long unused_pool_size_value;
      bool unused_pool_size_null;

      // time_created
      //
      long long time_created_value;
      bool time_created_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 5UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::AccountView, id_common >:
    public access::view_traits_impl< ::CoinDB::AccountView, id_sqlite >
  {
  };

  // AccountCountView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::AccountCountView, id_sqlite >:
    public access::view_traits< ::CoinDB::AccountCountView >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::AccountCountView, id_common >:
    public access::view_traits_impl< ::CoinDB::AccountCountView, id_sqlite >
  {
  };

  // AccountBinView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::AccountBinView, id_sqlite >:
    public access::view_traits< ::CoinDB::AccountBinView >
  {
    public:
    struct image_type
    {
      // account_id
      //
      long long account_id_value;
      bool account_id_null;

      // account_name
      //
      details::buffer account_name_value;
      std::size_t account_name_size;
      bool account_name_null;

      // account_hash
      //
      details::buffer account_hash_value;
      std::size_t account_hash_size;
      bool account_hash_null;

      // bin_id
      //
      long long bin_id_value;
      bool bin_id_null;

      // bin_name
      //
      details::buffer bin_name_value;
      std::size_t bin_name_size;
      bool bin_name_null;

      // bin_hash
      //
      details::buffer bin_hash_value;
      std::size_t bin_hash_size;
      bool bin_hash_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 6UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::AccountBinView, id_common >:
    public access::view_traits_impl< ::CoinDB::AccountBinView, id_sqlite >
  {
  };

  // SigningScriptView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::SigningScriptView, id_sqlite >:
    public access::view_traits< ::CoinDB::SigningScriptView >
  {
    public:
    struct image_type
    {
      // account_id
      //
      long long account_id_value;
      bool account_id_null;

      // account_name
      //
      details::buffer account_name_value;
      std::size_t account_name_size;
      bool account_name_null;

      // account_bin_id
      //
      long long account_bin_id_value;
      bool account_bin_id_null;

      // account_bin_name
      //
      details::buffer account_bin_name_value;
      std::size_t account_bin_name_size;
      bool account_bin_name_null;

      // id
      //
      long long id_value;
      bool id_null;

      // index
      //
      long long index_value;
      bool index_null;

      // label
      //
      details::buffer label_value;
      std::size_t label_size;
      bool label_null;

      // status
      //
      long long status_value;
      bool status_null;

      // txinscript
      //
      details::buffer txinscript_value;
      std::size_t txinscript_size;
      bool txinscript_null;

      // txoutscript
      //
      details::buffer txoutscript_value;
      std::size_t txoutscript_size;
      bool txoutscript_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 10UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::SigningScriptView, id_common >:
    public access::view_traits_impl< ::CoinDB::SigningScriptView, id_sqlite >
  {
  };

  // ScriptCountView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::ScriptCountView, id_sqlite >:
    public access::view_traits< ::CoinDB::ScriptCountView >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      // max_index
      //
      long long max_index_value;
      bool max_index_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 2UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::ScriptCountView, id_common >:
    public access::view_traits_impl< ::CoinDB::ScriptCountView, id_sqlite >
  {
  };

  // TxView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::TxView, id_sqlite >:
    public access::view_traits< ::CoinDB::TxView >
  {
    public:
    struct image_type
    {
      // id
      //
      long long id_value;
      bool id_null;

      // hash
      //
      details::buffer hash_value;
      std::size_t hash_size;
      bool hash_null;

      // unsigned_hash
      //
      details::buffer unsigned_hash_value;
      std::size_t unsigned_hash_size;
      bool unsigned_hash_null;

      // version
      //
      long long version_value;
      bool version_null;

      // locktime
      //
      long long locktime_value;
      bool locktime_null;

      // timestamp
      //
      long long timestamp_value;
      bool timestamp_null;

      // status
      //
      long long status_value;
      bool status_null;

      // have_all_outpoints
      //
      long long have_all_outpoints_value;
      bool have_all_outpoints_null;

      // txin_total
      //
      long long txin_total_value;
      bool txin_total_null;

      // txout_total
      //
      long long txout_total_value;
      bool txout_total_null;

      // height
      //
      long long height_value;
      bool height_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 11UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::TxView, id_common >:
    public access::view_traits_impl< ::CoinDB::TxView, id_sqlite >
  {
  };

  // TxOutView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::TxOutView, id_sqlite >:
    public access::view_traits< ::CoinDB::TxOutView >
  {
    public:
    struct image_type
    {
      // sending_account_id
      //
      long long sending_account_id_value;
      bool sending_account_id_null;

      // sending_account_name
      //
      details::buffer sending_account_name_value;
      std::size_t sending_account_name_size;
      bool sending_account_name_null;

      // receiving_account_id
      //
      long long receiving_account_id_value;
      bool receiving_account_id_null;

      // receiving_account_name
      //
      details::buffer receiving_account_name_value;
      std::size_t receiving_account_name_size;
      bool receiving_account_name_null;

      // account_bin_id
      //
      long long account_bin_id_value;
      bool account_bin_id_null;

      // account_bin_name
      //
      details::buffer account_bin_name_value;
      std::size_t account_bin_name_size;
      bool account_bin_name_null;

      // signingscript_id
      //
      long long signingscript_id_value;
      bool signingscript_id_null;

      // signingscript_label
      //
      details::buffer signingscript_label_value;
      std::size_t signingscript_label_size;
      bool signingscript_label_null;

      // signingscript_status
      //
      long long signingscript_status_value;
      bool signingscript_status_null;

      // signingscript_txinscript
      //
      details::buffer signingscript_txinscript_value;
      std::size_t signingscript_txinscript_size;
      bool signingscript_txinscript_null;

      // id
      //
      long long id_value;
      bool id_null;

      // script
      //
      details::buffer script_value;
      std::size_t script_size;
      bool script_null;

      // value
      //
      long long value_value;
      bool value_null;

      // status
      //
      long long status_value;
      bool status_null;

      // sending_label
      //
      details::buffer sending_label_value;
      std::size_t sending_label_size;
      bool sending_label_null;

      // receiving_label
      //
      details::buffer receiving_label_value;
      std::size_t receiving_label_size;
      bool receiving_label_null;

      // tx_id
      //
      long long tx_id_value;
      bool tx_id_null;

      // tx_unsigned_hash
      //
      details::buffer tx_unsigned_hash_value;
      std::size_t tx_unsigned_hash_size;
      bool tx_unsigned_hash_null;

      // tx_hash
      //
      details::buffer tx_hash_value;
      std::size_t tx_hash_size;
      bool tx_hash_null;

      // tx_timestamp
      //
      long long tx_timestamp_value;
      bool tx_timestamp_null;

      // tx_status
      //
      long long tx_status_value;
      bool tx_status_null;

      // tx_has_all_outpoints
      //
      long long tx_has_all_outpoints_value;
      bool tx_has_all_outpoints_null;

      // tx_txin_total
      //
      long long tx_txin_total_value;
      bool tx_txin_total_null;

      // tx_txout_total
      //
      long long tx_txout_total_value;
      bool tx_txout_total_null;

      // tx_index
      //
      long long tx_index_value;
      bool tx_index_null;

      // height
      //
      long long height_value;
      bool height_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    struct sending_account_tag;
    struct receiving_account_tag;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 26UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::TxOutView, id_common >:
    public access::view_traits_impl< ::CoinDB::TxOutView, id_sqlite >
  {
  };

  // BalanceView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::BalanceView, id_sqlite >:
    public access::view_traits< ::CoinDB::BalanceView >
  {
    public:
    struct image_type
    {
      // balance
      //
      long long balance_value;
      bool balance_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::BalanceView, id_common >:
    public access::view_traits_impl< ::CoinDB::BalanceView, id_sqlite >
  {
  };

  // BestHeightView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::BestHeightView, id_sqlite >:
    public access::view_traits< ::CoinDB::BestHeightView >
  {
    public:
    struct image_type
    {
      // height
      //
      long long height_value;
      bool height_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::BestHeightView, id_common >:
    public access::view_traits_impl< ::CoinDB::BestHeightView, id_sqlite >
  {
  };

  // HorizonHeightView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::HorizonHeightView, id_sqlite >:
    public access::view_traits< ::CoinDB::HorizonHeightView >
  {
    public:
    struct image_type
    {
      // height
      //
      long long height_value;
      bool height_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::HorizonHeightView, id_common >:
    public access::view_traits_impl< ::CoinDB::HorizonHeightView, id_sqlite >
  {
  };

  // BlockCountView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::BlockCountView, id_sqlite >:
    public access::view_traits< ::CoinDB::BlockCountView >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::BlockCountView, id_common >:
    public access::view_traits_impl< ::CoinDB::BlockCountView, id_sqlite >
  {
  };

  // MerkleBlockCountView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::MerkleBlockCountView, id_sqlite >:
    public access::view_traits< ::CoinDB::MerkleBlockCountView >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::MerkleBlockCountView, id_common >:
    public access::view_traits_impl< ::CoinDB::MerkleBlockCountView, id_sqlite >
  {
  };

  // HorizonTimestampView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::HorizonTimestampView, id_sqlite >:
    public access::view_traits< ::CoinDB::HorizonTimestampView >
  {
    public:
    struct image_type
    {
      // timestamp
      //
      long long timestamp_value;
      bool timestamp_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::HorizonTimestampView, id_common >:
    public access::view_traits_impl< ::CoinDB::HorizonTimestampView, id_sqlite >
  {
  };

  // ConfirmedTxView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::ConfirmedTxView, id_sqlite >:
    public access::view_traits< ::CoinDB::ConfirmedTxView >
  {
    public:
    struct image_type
    {
      // tx_id
      //
      long long tx_id_value;
      bool tx_id_null;

      // tx_hash
      //
      details::buffer tx_hash_value;
      std::size_t tx_hash_size;
      bool tx_hash_null;

      // merkleblock_id
      //
      long long merkleblock_id_value;
      bool merkleblock_id_null;

      // blockheader_id
      //
      long long blockheader_id_value;
      bool blockheader_id_null;

      // block_hash
      //
      details::buffer block_hash_value;
      std::size_t block_hash_size;
      bool block_hash_null;

      // block_height
      //
      long long block_height_value;
      bool block_height_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 6UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::ConfirmedTxView, id_common >:
    public access::view_traits_impl< ::CoinDB::ConfirmedTxView, id_sqlite >
  {
  };

  // IncompleteBlockCountView
  //
  template <>
  class access::view_traits_impl< ::CoinDB::IncompleteBlockCountView, id_sqlite >:
    public access::view_traits< ::CoinDB::IncompleteBlockCountView >
  {
    public:
    struct image_type
    {
      // count
      //
      long long count_value;
      bool count_null;

      std::size_t version;
    };

    typedef sqlite::view_statements<view_type> statements_type;

    typedef sqlite::query_base query_base_type;
    struct query_columns;

    static const bool versioned = false;

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (sqlite::bind*,
          image_type&);

    static void
    init (view_type&,
          const image_type&,
          database*);

    static const std::size_t column_count = 1UL;

    static query_base_type
    query_statement (const query_base_type&);

    static result<view_type>
    query (database&, const query_base_type&);
  };

  template <>
  class access::view_traits_impl< ::CoinDB::IncompleteBlockCountView, id_common >:
    public access::view_traits_impl< ::CoinDB::IncompleteBlockCountView, id_sqlite >
  {
  };

  // Version
  //
  // Network
  //
  // User
  //
  // Contact
  //
  // Keychain
  //
  template <>
  struct alias_traits<
    ::CoinDB::Keychain,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::Keychain, id_sqlite >::parent_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::Keychain, id_sqlite >
  {
    // parent
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Keychain,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::Keychain, id_sqlite >::parent_tag>
    parent_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::Keychain, id_sqlite, A >:
    query_columns_base< ::CoinDB::Keychain, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // depth
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    depth_type_;

    static const depth_type_ depth;

    // parent_fp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    parent_fp_type_;

    static const parent_fp_type_ parent_fp;

    // child_num
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    child_num_type_;

    static const child_num_type_ child_num;

    // pubkey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    pubkey_type_;

    static const pubkey_type_ pubkey;

    // chain_code
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    chain_code_type_;

    static const chain_code_type_ chain_code;

    // privkey_ciphertext
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    privkey_ciphertext_type_;

    static const privkey_ciphertext_type_ privkey_ciphertext;

    // privkey_salt
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    privkey_salt_type_;

    static const privkey_salt_type_ privkey_salt;

    // seed_ciphertext
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    seed_ciphertext_type_;

    static const seed_ciphertext_type_ seed_ciphertext;

    // seed_salt
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    seed_salt_type_;

    static const seed_salt_type_ seed_salt;

    // parent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    parent_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Keychain,
        id_sqlite,
        parent_alias_ > >
    parent_pointer_type_;

    struct parent_type_: parent_pointer_type_, parent_column_type_
    {
      parent_type_ (const char* t, const char* c, const char* conv)
        : parent_column_type_ (t, c, conv)
      {
      }
    };

    static const parent_type_ parent;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // hidden
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    hidden_type_;

    static const hidden_type_ hidden;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::name_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::depth_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  depth (A::table_name, "\"depth\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::parent_fp_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  parent_fp (A::table_name, "\"parent_fp\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::child_num_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  child_num (A::table_name, "\"child_num\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::pubkey_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  pubkey (A::table_name, "\"pubkey\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::chain_code_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  chain_code (A::table_name, "\"chain_code\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::privkey_ciphertext_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  privkey_ciphertext (A::table_name, "\"privkey_ciphertext\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::privkey_salt_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  privkey_salt (A::table_name, "\"privkey_salt\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::seed_ciphertext_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  seed_ciphertext (A::table_name, "\"seed_ciphertext\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::seed_salt_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  seed_salt (A::table_name, "\"seed_salt\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::parent_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  parent (A::table_name, "\"parent\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::hash_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Keychain, id_sqlite, A >::hidden_type_
  query_columns< ::CoinDB::Keychain, id_sqlite, A >::
  hidden (A::table_name, "\"hidden\"", 0);

  // Key
  //
  template <>
  struct alias_traits<
    ::CoinDB::Keychain,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::Key, id_sqlite >::root_keychain_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::Key, id_sqlite >
  {
    // root_keychain
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Keychain,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::Key, id_sqlite >::root_keychain_tag>
    root_keychain_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::Key, id_sqlite, A >:
    query_columns_base< ::CoinDB::Key, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // root_keychain
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    root_keychain_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Keychain,
        id_sqlite,
        root_keychain_alias_ > >
    root_keychain_pointer_type_;

    struct root_keychain_type_: root_keychain_pointer_type_, root_keychain_column_type_
    {
      root_keychain_type_ (const char* t, const char* c, const char* conv)
        : root_keychain_column_type_ (t, c, conv)
      {
      }
    };

    static const root_keychain_type_ root_keychain;

    // index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    index_type_;

    static const index_type_ index;

    // pubkey
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    pubkey_type_;

    static const pubkey_type_ pubkey;

    // is_private
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    is_private_type_;

    static const is_private_type_ is_private;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::Key, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::Key, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Key, id_sqlite, A >::root_keychain_type_
  query_columns< ::CoinDB::Key, id_sqlite, A >::
  root_keychain (A::table_name, "\"root_keychain\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Key, id_sqlite, A >::index_type_
  query_columns< ::CoinDB::Key, id_sqlite, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Key, id_sqlite, A >::pubkey_type_
  query_columns< ::CoinDB::Key, id_sqlite, A >::
  pubkey (A::table_name, "\"pubkey\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Key, id_sqlite, A >::is_private_type_
  query_columns< ::CoinDB::Key, id_sqlite, A >::
  is_private (A::table_name, "\"is_private\"", 0);

  // AccountBin
  //
  template <>
  struct alias_traits<
    ::CoinDB::Account,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite >::account_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::AccountBin, id_sqlite >
  {
    // account
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Account,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite >::account_tag>
    account_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::AccountBin, id_sqlite, A >:
    query_columns_base< ::CoinDB::AccountBin, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Account,
        id_sqlite,
        account_alias_ > >
    account_pointer_type_;

    struct account_type_: account_pointer_type_, account_column_type_
    {
      account_type_ (const char* t, const char* c, const char* conv)
        : account_column_type_ (t, c, conv)
      {
      }
    };

    static const account_type_ account;

    // index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    index_type_;

    static const index_type_ index;

    // name
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    name_type_;

    static const name_type_ name;

    // script_count
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    script_count_type_;

    static const script_count_type_ script_count;

    // next_script_index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    next_script_index_type_;

    static const next_script_index_type_ next_script_index;

    // minsigs
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    minsigs_type_;

    static const minsigs_type_ minsigs;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::account_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  account (A::table_name, "\"account\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::index_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::name_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  name (A::table_name, "\"name\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::script_count_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  script_count (A::table_name, "\"script_count\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::next_script_index_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  next_script_index (A::table_name, "\"next_script_index\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::minsigs_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  minsigs (A::table_name, "\"minsigs\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::AccountBin, id_sqlite, A >::hash_type_
  query_columns< ::CoinDB::AccountBin, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  // Account
  //
  // SigningScript
  //
  template <>
  struct alias_traits<
    ::CoinDB::Account,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >::account_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::AccountBin,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >::account_bin_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::Contact,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >::contact_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::SigningScript, id_sqlite >
  {
    // account
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Account,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >::account_tag>
    account_alias_;

    // account_bin
    //
    typedef
    odb::alias_traits<
      ::CoinDB::AccountBin,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >::account_bin_tag>
    account_bin_alias_;

    // contact
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Contact,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >::contact_tag>
    contact_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::SigningScript, id_sqlite, A >:
    query_columns_base< ::CoinDB::SigningScript, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Account,
        id_sqlite,
        account_alias_ > >
    account_pointer_type_;

    struct account_type_: account_pointer_type_, account_column_type_
    {
      account_type_ (const char* t, const char* c, const char* conv)
        : account_column_type_ (t, c, conv)
      {
      }
    };

    static const account_type_ account;

    // account_bin
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_bin_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::AccountBin,
        id_sqlite,
        account_bin_alias_ > >
    account_bin_pointer_type_;

    struct account_bin_type_: account_bin_pointer_type_, account_bin_column_type_
    {
      account_bin_type_ (const char* t, const char* c, const char* conv)
        : account_bin_column_type_ (t, c, conv)
      {
      }
    };

    static const account_bin_type_ account_bin;

    // index
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    index_type_;

    static const index_type_ index;

    // label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    label_type_;

    static const label_type_ label;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinDB::SigningScript::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // txinscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txinscript_type_;

    static const txinscript_type_ txinscript;

    // txoutscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    txoutscript_type_;

    static const txoutscript_type_ txoutscript;

    // contact
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    contact_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Contact,
        id_sqlite,
        contact_alias_ > >
    contact_pointer_type_;

    struct contact_type_: contact_pointer_type_, contact_column_type_
    {
      contact_type_ (const char* t, const char* c, const char* conv)
        : contact_column_type_ (t, c, conv)
      {
      }
    };

    static const contact_type_ contact;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::account_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  account (A::table_name, "\"account\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::account_bin_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  account_bin (A::table_name, "\"account_bin\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::index_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  index (A::table_name, "\"index\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::label_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  label (A::table_name, "\"label\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::status_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::txinscript_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  txinscript (A::table_name, "\"txinscript\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::txoutscript_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  txoutscript (A::table_name, "\"txoutscript\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::SigningScript, id_sqlite, A >::contact_type_
  query_columns< ::CoinDB::SigningScript, id_sqlite, A >::
  contact (A::table_name, "\"contact\"", 0);

  // BlockHeader
  //
  // MerkleBlock
  //
  template <>
  struct alias_traits<
    ::CoinDB::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite >::blockheader_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::MerkleBlock, id_sqlite >
  {
    // blockheader
    //
    typedef
    odb::alias_traits<
      ::CoinDB::BlockHeader,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite >::blockheader_tag>
    blockheader_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >:
    query_columns_base< ::CoinDB::MerkleBlock, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::BlockHeader,
        id_sqlite,
        blockheader_alias_ > >
    blockheader_pointer_type_;

    struct blockheader_type_: blockheader_pointer_type_, blockheader_column_type_
    {
      blockheader_type_ (const char* t, const char* c, const char* conv)
        : blockheader_column_type_ (t, c, conv)
      {
      }
    };

    static const blockheader_type_ blockheader;

    // txcount
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txcount_type_;

    static const txcount_type_ txcount;

    // flags
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    flags_type_;

    static const flags_type_ flags;

    // txsinserted
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txsinserted_type_;

    static const txsinserted_type_ txsinserted;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::blockheader_type_
  query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::txcount_type_
  query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  txcount (A::table_name, "\"txcount\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::flags_type_
  query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  flags (A::table_name, "\"flags\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::txsinserted_type_
  query_columns< ::CoinDB::MerkleBlock, id_sqlite, A >::
  txsinserted (A::table_name, "\"txsinserted\"", 0);

  // TxIn
  //
  template <>
  struct alias_traits<
    ::CoinDB::Tx,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >::tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::TxOut,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >::outpoint_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::TxIn, id_sqlite >
  {
    // tx
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Tx,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >::tx_tag>
    tx_alias_;

    // outpoint
    //
    typedef
    odb::alias_traits<
      ::CoinDB::TxOut,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >::outpoint_tag>
    outpoint_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::TxIn, id_sqlite, A >:
    query_columns_base< ::CoinDB::TxIn, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // outhash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    outhash_type_;

    static const outhash_type_ outhash;

    // outindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    outindex_type_;

    static const outindex_type_ outindex;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // sequence
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sequence_type_;

    static const sequence_type_ sequence;

    // tx
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tx_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Tx,
        id_sqlite,
        tx_alias_ > >
    tx_pointer_type_;

    struct tx_type_: tx_pointer_type_, tx_column_type_
    {
      tx_type_ (const char* t, const char* c, const char* conv)
        : tx_column_type_ (t, c, conv)
      {
      }
    };

    static const tx_type_ tx;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;

    // outpoint
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    outpoint_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::TxOut,
        id_sqlite,
        outpoint_alias_ > >
    outpoint_pointer_type_;

    struct outpoint_type_: outpoint_pointer_type_, outpoint_column_type_
    {
      outpoint_type_ (const char* t, const char* c, const char* conv)
        : outpoint_column_type_ (t, c, conv)
      {
      }
    };

    static const outpoint_type_ outpoint;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::outhash_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  outhash (A::table_name, "\"outhash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::outindex_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  outindex (A::table_name, "\"outindex\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::script_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::sequence_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  sequence (A::table_name, "\"sequence\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::tx_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  tx (A::table_name, "\"tx\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::txindex_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxIn, id_sqlite, A >::outpoint_type_
  query_columns< ::CoinDB::TxIn, id_sqlite, A >::
  outpoint (A::table_name, "\"outpoint\"", 0);

  // TxOut
  //
  template <>
  struct alias_traits<
    ::CoinDB::Tx,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::tx_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::TxIn,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::spent_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::Account,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::sending_account_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::Account,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::receiving_account_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::AccountBin,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::account_bin_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::SigningScript,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::signingscript_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::TxOut, id_sqlite >
  {
    // tx
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Tx,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::tx_tag>
    tx_alias_;

    // spent
    //
    typedef
    odb::alias_traits<
      ::CoinDB::TxIn,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::spent_tag>
    spent_alias_;

    // sending_account
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Account,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::sending_account_tag>
    sending_account_alias_;

    // receiving_account
    //
    typedef
    odb::alias_traits<
      ::CoinDB::Account,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::receiving_account_tag>
    receiving_account_alias_;

    // account_bin
    //
    typedef
    odb::alias_traits<
      ::CoinDB::AccountBin,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::account_bin_tag>
    account_bin_alias_;

    // signingscript
    //
    typedef
    odb::alias_traits<
      ::CoinDB::SigningScript,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::signingscript_tag>
    signingscript_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::TxOut, id_sqlite, A >:
    query_columns_base< ::CoinDB::TxOut, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // value
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    value_type_;

    static const value_type_ value;

    // script
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    script_type_;

    static const script_type_ script;

    // tx
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    tx_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Tx,
        id_sqlite,
        tx_alias_ > >
    tx_pointer_type_;

    struct tx_type_: tx_pointer_type_, tx_column_type_
    {
      tx_type_ (const char* t, const char* c, const char* conv)
        : tx_column_type_ (t, c, conv)
      {
      }
    };

    static const tx_type_ tx;

    // txindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txindex_type_;

    static const txindex_type_ txindex;

    // spent
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    spent_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::TxIn,
        id_sqlite,
        spent_alias_ > >
    spent_pointer_type_;

    struct spent_type_: spent_pointer_type_, spent_column_type_
    {
      spent_type_ (const char* t, const char* c, const char* conv)
        : spent_column_type_ (t, c, conv)
      {
      }
    };

    static const spent_type_ spent;

    // sending_account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    sending_account_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Account,
        id_sqlite,
        sending_account_alias_ > >
    sending_account_pointer_type_;

    struct sending_account_type_: sending_account_pointer_type_, sending_account_column_type_
    {
      sending_account_type_ (const char* t, const char* c, const char* conv)
        : sending_account_column_type_ (t, c, conv)
      {
      }
    };

    static const sending_account_type_ sending_account;

    // sending_label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    sending_label_type_;

    static const sending_label_type_ sending_label;

    // receiving_account
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    receiving_account_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::Account,
        id_sqlite,
        receiving_account_alias_ > >
    receiving_account_pointer_type_;

    struct receiving_account_type_: receiving_account_pointer_type_, receiving_account_column_type_
    {
      receiving_account_type_ (const char* t, const char* c, const char* conv)
        : receiving_account_column_type_ (t, c, conv)
      {
      }
    };

    static const receiving_account_type_ receiving_account;

    // receiving_label
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::std::string,
        sqlite::id_text >::query_type,
      sqlite::id_text >
    receiving_label_type_;

    static const receiving_label_type_ receiving_label;

    // account_bin
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    account_bin_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::AccountBin,
        id_sqlite,
        account_bin_alias_ > >
    account_bin_pointer_type_;

    struct account_bin_type_: account_bin_pointer_type_, account_bin_column_type_
    {
      account_bin_type_ (const char* t, const char* c, const char* conv)
        : account_bin_column_type_ (t, c, conv)
      {
      }
    };

    static const account_bin_type_ account_bin;

    // signingscript
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    signingscript_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::SigningScript,
        id_sqlite,
        signingscript_alias_ > >
    signingscript_pointer_type_;

    struct signingscript_type_: signingscript_pointer_type_, signingscript_column_type_
    {
      signingscript_type_ (const char* t, const char* c, const char* conv)
        : signingscript_column_type_ (t, c, conv)
      {
      }
    };

    static const signingscript_type_ signingscript;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinDB::TxOut::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::value_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  value (A::table_name, "\"value\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::script_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  script (A::table_name, "\"script\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::tx_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  tx (A::table_name, "\"tx\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::txindex_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  txindex (A::table_name, "\"txindex\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::spent_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  spent (A::table_name, "\"spent\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::sending_account_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  sending_account (A::table_name, "\"sending_account\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::sending_label_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  sending_label (A::table_name, "\"sending_label\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::receiving_account_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  receiving_account (A::table_name, "\"receiving_account\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::receiving_label_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  receiving_label (A::table_name, "\"receiving_label\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::account_bin_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  account_bin (A::table_name, "\"account_bin\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::signingscript_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  signingscript (A::table_name, "\"signingscript\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::TxOut, id_sqlite, A >::status_type_
  query_columns< ::CoinDB::TxOut, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  // Tx
  //
  template <>
  struct alias_traits<
    ::CoinDB::BlockHeader,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::Tx, id_sqlite >::blockheader_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::User,
    id_sqlite,
    access::object_traits_impl< ::CoinDB::Tx, id_sqlite >::user_tag>
  {
    static const char table_name[];
  };

  template <>
  struct query_columns_base< ::CoinDB::Tx, id_sqlite >
  {
    // blockheader
    //
    typedef
    odb::alias_traits<
      ::CoinDB::BlockHeader,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::Tx, id_sqlite >::blockheader_tag>
    blockheader_alias_;

    // user
    //
    typedef
    odb::alias_traits<
      ::CoinDB::User,
      id_sqlite,
      access::object_traits_impl< ::CoinDB::Tx, id_sqlite >::user_tag>
    user_alias_;
  };

  template <typename A>
  struct query_columns< ::CoinDB::Tx, id_sqlite, A >:
    query_columns_base< ::CoinDB::Tx, id_sqlite >
  {
    // id
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    id_type_;

    static const id_type_ id;

    // hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    hash_type_;

    static const hash_type_ hash;

    // unsigned_hash
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::bytes_t,
        sqlite::id_blob >::query_type,
      sqlite::id_blob >
    unsigned_hash_type_;

    static const unsigned_hash_type_ unsigned_hash;

    // version
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    version_type_;

    static const version_type_ version;

    // locktime
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    locktime_type_;

    static const locktime_type_ locktime;

    // timestamp
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint32_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    timestamp_type_;

    static const timestamp_type_ timestamp;

    // status
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::CoinDB::Tx::status_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    status_type_;

    static const status_type_ status;

    // conflicting
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    conflicting_type_;

    static const conflicting_type_ conflicting;

    // have_all_outpoints
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        bool,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    have_all_outpoints_type_;

    static const have_all_outpoints_type_ have_all_outpoints;

    // txin_total
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txin_total_type_;

    static const txin_total_type_ txin_total;

    // txout_total
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        ::uint64_t,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    txout_total_type_;

    static const txout_total_type_ txout_total;

    // blockheader
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockheader_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::BlockHeader,
        id_sqlite,
        blockheader_alias_ > >
    blockheader_pointer_type_;

    struct blockheader_type_: blockheader_pointer_type_, blockheader_column_type_
    {
      blockheader_type_ (const char* t, const char* c, const char* conv)
        : blockheader_column_type_ (t, c, conv)
      {
      }
    };

    static const blockheader_type_ blockheader;

    // blockindex
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    blockindex_type_;

    static const blockindex_type_ blockindex;

    // user
    //
    typedef
    sqlite::query_column<
      sqlite::value_traits<
        long unsigned int,
        sqlite::id_integer >::query_type,
      sqlite::id_integer >
    user_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::CoinDB::User,
        id_sqlite,
        user_alias_ > >
    user_pointer_type_;

    struct user_type_: user_pointer_type_, user_column_type_
    {
      user_type_ (const char* t, const char* c, const char* conv)
        : user_column_type_ (t, c, conv)
      {
      }
    };

    static const user_type_ user;
  };

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::id_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::hash_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  hash (A::table_name, "\"hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::unsigned_hash_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  unsigned_hash (A::table_name, "\"unsigned_hash\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::version_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  version (A::table_name, "\"version\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::locktime_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  locktime (A::table_name, "\"locktime\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::timestamp_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  timestamp (A::table_name, "\"timestamp\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::status_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  status (A::table_name, "\"status\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::conflicting_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  conflicting (A::table_name, "\"conflicting\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::have_all_outpoints_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  have_all_outpoints (A::table_name, "\"have_all_outpoints\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::txin_total_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  txin_total (A::table_name, "\"txin_total\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::txout_total_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  txout_total (A::table_name, "\"txout_total\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::blockheader_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  blockheader (A::table_name, "\"blockheader\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::blockindex_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  blockindex (A::table_name, "\"blockindex\"", 0);

  template <typename A>
  const typename query_columns< ::CoinDB::Tx, id_sqlite, A >::user_type_
  query_columns< ::CoinDB::Tx, id_sqlite, A >::
  user (A::table_name, "\"user\"", 0);

  // KeychainView
  //
  struct access::view_traits_impl< ::CoinDB::KeychainView, id_sqlite >::query_columns
  {
    // Keychain
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Keychain,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Keychain, id_sqlite > >
    Keychain;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
    Account;
  };

  // AccountView
  //
  struct access::view_traits_impl< ::CoinDB::AccountView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
  {
  };

  // AccountCountView
  //
  struct access::view_traits_impl< ::CoinDB::AccountCountView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
  {
  };

  // AccountBinView
  //
  struct access::view_traits_impl< ::CoinDB::AccountBinView, id_sqlite >::query_columns
  {
    // AccountBin
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::AccountBin,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite > >
    AccountBin;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
    Account;
  };

  // SigningScriptView
  //
  struct access::view_traits_impl< ::CoinDB::SigningScriptView, id_sqlite >::query_columns
  {
    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite > >
    SigningScript;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
    Account;

    // AccountBin
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::AccountBin,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite > >
    AccountBin;
  };

  // ScriptCountView
  //
  struct access::view_traits_impl< ::CoinDB::ScriptCountView, id_sqlite >::query_columns
  {
    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite > >
    SigningScript;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
    Account;

    // AccountBin
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::AccountBin,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite > >
    AccountBin;
  };

  // TxView
  //
  struct access::view_traits_impl< ::CoinDB::TxView, id_sqlite >::query_columns
  {
    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Tx, id_sqlite > >
    Tx;

    // BlockHeader
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite > >
    BlockHeader;
  };

  // TxOutView
  //
  template <>
  struct alias_traits<
    ::CoinDB::Account,
    id_sqlite,
    access::view_traits_impl< ::CoinDB::TxOutView, id_sqlite >::sending_account_tag>
  {
    static const char table_name[];
  };

  template <>
  struct alias_traits<
    ::CoinDB::Account,
    id_sqlite,
    access::view_traits_impl< ::CoinDB::TxOutView, id_sqlite >::receiving_account_tag>
  {
    static const char table_name[];
  };

  struct access::view_traits_impl< ::CoinDB::TxOutView, id_sqlite >::query_columns
  {
    // TxOut
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::TxOut,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::TxOut, id_sqlite > >
    TxOut;

    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Tx, id_sqlite > >
    Tx;

    // BlockHeader
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite > >
    BlockHeader;

    // sending_account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::alias_traits< ::CoinDB::Account,
        id_sqlite,
        access::view_traits_impl< ::CoinDB::TxOutView, id_sqlite >::sending_account_tag> >
    sending_account;

    // receiving_account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::alias_traits< ::CoinDB::Account,
        id_sqlite,
        access::view_traits_impl< ::CoinDB::TxOutView, id_sqlite >::receiving_account_tag> >
    receiving_account;

    // AccountBin
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::AccountBin,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite > >
    AccountBin;

    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite > >
    SigningScript;
  };

  // BalanceView
  //
  struct access::view_traits_impl< ::CoinDB::BalanceView, id_sqlite >::query_columns
  {
    // TxOut
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::TxOut,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::TxOut, id_sqlite > >
    TxOut;

    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Tx, id_sqlite > >
    Tx;

    // BlockHeader
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite > >
    BlockHeader;

    // Account
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
    Account;

    // AccountBin
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::AccountBin,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite > >
    AccountBin;

    // SigningScript
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::SigningScript,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite > >
    SigningScript;
  };

  // BestHeightView
  //
  struct access::view_traits_impl< ::CoinDB::BestHeightView, id_sqlite >::query_columns
  {
    // MerkleBlock
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::MerkleBlock,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite > >
    MerkleBlock;

    // BlockHeader
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite > >
    BlockHeader;
  };

  // HorizonHeightView
  //
  struct access::view_traits_impl< ::CoinDB::HorizonHeightView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinDB::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite > >
  {
  };

  // BlockCountView
  //
  struct access::view_traits_impl< ::CoinDB::BlockCountView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinDB::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite > >
  {
  };

  // MerkleBlockCountView
  //
  struct access::view_traits_impl< ::CoinDB::MerkleBlockCountView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinDB::MerkleBlock,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite > >
  {
  };

  // HorizonTimestampView
  //
  struct access::view_traits_impl< ::CoinDB::HorizonTimestampView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinDB::Account,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Account, id_sqlite > >
  {
  };

  // ConfirmedTxView
  //
  struct access::view_traits_impl< ::CoinDB::ConfirmedTxView, id_sqlite >::query_columns
  {
    // Tx
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::Tx,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::Tx, id_sqlite > >
    Tx;

    // MerkleBlock
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::MerkleBlock,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite > >
    MerkleBlock;

    // BlockHeader
    //
    typedef
    odb::pointer_query_columns<
      ::CoinDB::BlockHeader,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite > >
    BlockHeader;
  };

  // IncompleteBlockCountView
  //
  struct access::view_traits_impl< ::CoinDB::IncompleteBlockCountView, id_sqlite >::query_columns:
    odb::pointer_query_columns<
      ::CoinDB::MerkleBlock,
      id_sqlite,
      odb::access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite > >
  {
  };
}

#include "Schema-odb-sqlite.ixx"

#include <odb/post.hxx>

#endif // SCHEMA_ODB_SQLITE_HXX
