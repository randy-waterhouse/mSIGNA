// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

namespace odb
{
  // Version
  //

  inline
  access::object_traits< ::CoinDB::Version >::id_type
  access::object_traits< ::CoinDB::Version >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::Version >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::Version >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Network
  //

  inline
  access::object_traits< ::CoinDB::Network >::id_type
  access::object_traits< ::CoinDB::Network >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::Network >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::Network >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // User
  //

  inline
  access::object_traits< ::CoinDB::User >::id_type
  access::object_traits< ::CoinDB::User >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::User >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::User >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Contact
  //

  inline
  access::object_traits< ::CoinDB::Contact >::id_type
  access::object_traits< ::CoinDB::Contact >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::Contact >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::Contact >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Keychain
  //

  inline
  access::object_traits< ::CoinDB::Keychain >::id_type
  access::object_traits< ::CoinDB::Keychain >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::Keychain >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::Keychain >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Key
  //

  inline
  access::object_traits< ::CoinDB::Key >::id_type
  access::object_traits< ::CoinDB::Key >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::Key >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::Key >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AccountBin
  //

  inline
  access::object_traits< ::CoinDB::AccountBin >::id_type
  access::object_traits< ::CoinDB::AccountBin >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::AccountBin >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::AccountBin >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Account
  //

  inline
  access::object_traits< ::CoinDB::Account >::id_type
  access::object_traits< ::CoinDB::Account >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::Account >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::Account >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SigningScript
  //

  inline
  access::object_traits< ::CoinDB::SigningScript >::id_type
  access::object_traits< ::CoinDB::SigningScript >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::SigningScript >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::SigningScript >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BlockHeader
  //

  inline
  access::object_traits< ::CoinDB::BlockHeader >::id_type
  access::object_traits< ::CoinDB::BlockHeader >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::BlockHeader >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::BlockHeader >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MerkleBlock
  //

  inline
  access::object_traits< ::CoinDB::MerkleBlock >::id_type
  access::object_traits< ::CoinDB::MerkleBlock >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::MerkleBlock >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::MerkleBlock >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxIn
  //

  inline
  access::object_traits< ::CoinDB::TxIn >::id_type
  access::object_traits< ::CoinDB::TxIn >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::TxIn >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::TxIn >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxOut
  //

  inline
  access::object_traits< ::CoinDB::TxOut >::id_type
  access::object_traits< ::CoinDB::TxOut >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::TxOut >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::TxOut >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // Tx
  //

  inline
  access::object_traits< ::CoinDB::Tx >::id_type
  access::object_traits< ::CoinDB::Tx >::
  id (const object_type& o)
  {
    return o.id_;
  }

  inline
  void access::object_traits< ::CoinDB::Tx >::
  callback (database& db, object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  inline
  void access::object_traits< ::CoinDB::Tx >::
  callback (database& db, const object_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // KeychainView
  //

  inline
  void access::view_traits< ::CoinDB::KeychainView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AccountView
  //

  inline
  void access::view_traits< ::CoinDB::AccountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AccountCountView
  //

  inline
  void access::view_traits< ::CoinDB::AccountCountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // AccountBinView
  //

  inline
  void access::view_traits< ::CoinDB::AccountBinView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // SigningScriptView
  //

  inline
  void access::view_traits< ::CoinDB::SigningScriptView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ScriptCountView
  //

  inline
  void access::view_traits< ::CoinDB::ScriptCountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxView
  //

  inline
  void access::view_traits< ::CoinDB::TxView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // TxOutView
  //

  inline
  void access::view_traits< ::CoinDB::TxOutView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BalanceView
  //

  inline
  void access::view_traits< ::CoinDB::BalanceView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BestHeightView
  //

  inline
  void access::view_traits< ::CoinDB::BestHeightView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // HorizonHeightView
  //

  inline
  void access::view_traits< ::CoinDB::HorizonHeightView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // BlockCountView
  //

  inline
  void access::view_traits< ::CoinDB::BlockCountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // MerkleBlockCountView
  //

  inline
  void access::view_traits< ::CoinDB::MerkleBlockCountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // HorizonTimestampView
  //

  inline
  void access::view_traits< ::CoinDB::HorizonTimestampView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // ConfirmedTxView
  //

  inline
  void access::view_traits< ::CoinDB::ConfirmedTxView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }

  // IncompleteBlockCountView
  //

  inline
  void access::view_traits< ::CoinDB::IncompleteBlockCountView >::
  callback (database& db, view_type& x, callback_event e)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (x);
    ODB_POTENTIALLY_UNUSED (e);
  }
}

namespace odb
{
  // Version
  //

  inline
  void access::object_traits_impl< ::CoinDB::Version, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinDB::Version, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Network
  //

  inline
  void access::object_traits_impl< ::CoinDB::Network, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinDB::Network, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // User
  //

  inline
  void access::object_traits_impl< ::CoinDB::User, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Contact
  //

  inline
  void access::object_traits_impl< ::CoinDB::Contact, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinDB::Contact, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Keychain
  //

  inline
  void access::object_traits_impl< ::CoinDB::Keychain, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Key
  //

  inline
  void access::object_traits_impl< ::CoinDB::Key, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // IndexedLabel
  //

  inline
  bool access::composite_value_traits< ::CoinDB::IndexedLabel, id_sqlite >::
  get_null (const image_type& i)
  {
    bool r (true);
    r = r && i.first_null;
    r = r && i.second_null;
    return r;
  }

  inline
  void access::composite_value_traits< ::CoinDB::IndexedLabel, id_sqlite >::
  set_null (image_type& i,
            sqlite::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace sqlite;

    i.first_null = true;
    i.second_null = true;
  }

  // AccountBin
  //

  inline
  void access::object_traits_impl< ::CoinDB::AccountBin, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // Account
  //

  inline
  void access::object_traits_impl< ::CoinDB::Account, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // SigningScript
  //

  inline
  void access::object_traits_impl< ::CoinDB::SigningScript, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // BlockHeader
  //

  inline
  void access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinDB::BlockHeader, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // MerkleBlock
  //

  inline
  void access::object_traits_impl< ::CoinDB::MerkleBlock, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // TxIn
  //

  inline
  void access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinDB::TxIn, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // TxOut
  //

  inline
  void access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  inline
  void access::object_traits_impl< ::CoinDB::TxOut, id_sqlite >::
  load_ (statements_type& sts,
         object_type& obj,
         bool)
  {
    ODB_POTENTIALLY_UNUSED (sts);
    ODB_POTENTIALLY_UNUSED (obj);
  }

  // Tx
  //

  inline
  void access::object_traits_impl< ::CoinDB::Tx, id_sqlite >::
  erase (database& db, const object_type& obj)
  {
    callback (db, obj, callback_event::pre_erase);
    erase (db, id (obj));
    callback (db, obj, callback_event::post_erase);
  }

  // KeychainView
  //

  // AccountView
  //

  // AccountCountView
  //

  // AccountBinView
  //

  // SigningScriptView
  //

  // ScriptCountView
  //

  // TxView
  //

  // TxOutView
  //

  // BalanceView
  //

  // BestHeightView
  //

  // HorizonHeightView
  //

  // BlockCountView
  //

  // MerkleBlockCountView
  //

  // HorizonTimestampView
  //

  // ConfirmedTxView
  //

  // IncompleteBlockCountView
  //
}

